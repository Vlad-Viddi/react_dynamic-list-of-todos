{"version":3,"sources":["components/TodoItem.tsx","components/LoadingButtons.tsx","components/SortButtons.tsx","helpers/api.ts","App.tsx","index.tsx"],"names":["TodoItem","todo","className","completed","user","name","title","LoadingButtons","isLoading","errorMessage","todos","handleLoadClick","type","disabled","role","aria-hidden","onClick","hidden","length","SortButtons","setTypeOfSort","getInfo","url","a","fetch","response","json","getUsers","getTodos","App","useState","setTodos","setIsLoading","setErrorMessage","typeOfSort","todosFromServer","usersFromServer","todosWithUsers","map","find","id","userId","visibleTodos","useMemo","sortType","sort","b","localeCompare","getVisibleTodos","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1f4d390.chunk.js","sourcesContent":["import React from 'react';\nimport { Todo } from '../helpers/api';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => (\n  <div\n    className=\"card text-white bg-primary mb-3 item\"\n  >\n    <div className=\"card-header\">\n      Status:\n      {\n        todo.completed\n          ? ' Finished'\n          : ' Active'\n      }\n    </div>\n    <div className=\"card-body\">\n      <h5 className=\"card-title\">{todo.user ? todo.user.name : 'unknown'}</h5>\n      <p className=\"card-text\">{todo.title}</p>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { Todo } from '../helpers/api';\n\ntype Props = {\n  isLoading: boolean;\n  errorMessage: string;\n  todos: Todo[];\n  handleLoadClick: () => void;\n};\n\nconst LoadingButtons: React.FC<Props> = (\n  {\n    isLoading, errorMessage, todos, handleLoadClick,\n  },\n) => {\n  return (\n    isLoading\n      ? (\n        <button className=\"btn btn-primary\" type=\"button\" disabled>\n          <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\" />\n          Loading...\n        </button>\n      )\n      : (\n        <>\n          <button\n            className=\"btn btn-primary\"\n            type=\"button\"\n            onClick={handleLoadClick}\n            hidden={todos.length !== 0}\n          >\n            <span role=\"status\" aria-hidden=\"true\" />\n            Load\n          </button>\n          <p\n            className=\"alert alert-primary mt5\"\n            hidden={errorMessage === ''}\n            role=\"alert\"\n          >\n            {`¯\\\\_(ツ)_/¯ ${errorMessage}`}\n          </p>\n        </>\n      )\n  );\n};\n\nexport default LoadingButtons;\n","import React from 'react';\nimport { Todo } from '../helpers/api';\n\ntype SortProps = {\n  todos: Todo[];\n  setTypeOfSort: (param: string) => void;\n};\n\nconst SortButtons: React.FC<SortProps> = ({\n  todos, setTypeOfSort,\n}) => {\n  return (\n    <div className=\"sorting-btns\" hidden={todos.length === 0}>\n      <button\n        type=\"button\"\n        className=\"btn btn-success btn-sort\"\n        onClick={() => setTypeOfSort('title')}\n      >\n        Sort by Title\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-danger btn-sort\"\n        onClick={() => setTypeOfSort('id')}\n      >\n        Sort by ID\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-warning btn-sort\"\n        onClick={() => setTypeOfSort('user')}\n      >\n        Sort by User\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-secondary btn-sort\"\n        onClick={() => setTypeOfSort('')}\n      >\n        RESET\n      </button>\n    </div>\n  );\n};\n\nexport default SortButtons;\n","const BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api/';\n\nexport interface User {\n  id: number;\n  name: string;\n}\n\nexport interface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId?: number;\n  user?: User;\n}\n\nexport const getInfo = async <T>(url: string): Promise<T> => {\n  const response = await fetch(BASE_URL + url);\n\n  return response.json();\n};\n\nexport const getUsers = async (): Promise <User[]> => {\n  return getInfo('/users.json');\n};\n\nexport const getTodos = async (): Promise <Todo[]> => {\n  return getInfo('/todos.json');\n};\n","import React, { useState, useMemo } from 'react';\nimport './App.css';\nimport { TodoItem } from './components/TodoItem';\nimport LoadingButtons from './components/LoadingButtons';\nimport SortButtons from './components/SortButtons';\nimport { getUsers, getTodos, Todo } from './helpers/api';\n\nconst App = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [typeOfSort, setTypeOfSort] = useState('');\n\n  const handleLoadClick = async () => {\n    setIsLoading(true);\n\n    try {\n      const todosFromServer = await getTodos();\n      const usersFromServer = await getUsers();\n\n      const todosWithUsers = todosFromServer.map(todo => ({\n        ...todo,\n        user: usersFromServer.find(user => user.id === todo.userId),\n      }));\n\n      setTodos(todosWithUsers);\n    } catch (error) {\n      setErrorMessage('Errors happens, try to reload');\n    }\n\n    setIsLoading(false);\n  };\n\n  const getVisibleTodos = (sortType: string) => {\n    switch (sortType) {\n      case 'title':\n        return [...todos].sort((a, b) => a.title.localeCompare(b.title));\n\n      case 'id':\n        return [...todos].sort((a, b) => a.id - b.id);\n\n      case 'user':\n        return [...todos].sort((a, b) => {\n          return a.user && b.user\n            ? a.user?.name.localeCompare(b.user.name)\n            : 0;\n        });\n\n      default:\n        return [...todos];\n    }\n  };\n\n  const visibleTodos = useMemo(() => getVisibleTodos(typeOfSort), [typeOfSort, todos]);\n\n  return (\n    <div className=\"app\">\n      <h1>Dynamic list of TODOs</h1>\n\n      <LoadingButtons\n        todos={todos}\n        isLoading={isLoading}\n        handleLoadClick={handleLoadClick}\n        errorMessage={errorMessage}\n      />\n\n      <SortButtons\n        todos={todos}\n        setTypeOfSort={setTypeOfSort}\n      />\n\n      <ul className=\"cards__list\">\n        {visibleTodos.map(todo => (\n          <li key={todo.id}>\n            <TodoItem todo={todo} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}